% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Plumber.R
\name{Plumber}
\alias{Plumber}
\title{The Plumber Class}
\description{
This class encapsulates all of the logic of a plumber2 api, and is what gets
passed around in the functional api of plumber2. The Plumber class is a
subclass of the \link[fiery:Fire]{fiery::Fire} class. Please consult the documentation for
this for additional information on what this type of server is capable of.
Note that the Plumber objects are reference objects, meaning that any change
to it will change all instances of the object.
\subsection{Initialization}{

A new 'Plumber'-object is initialized using the \code{new()} method on the
generator:

\tabular{l}{
\code{api <- Plumber$new()}
}

However, most users will use the functional api of the package and thus
construct one using \code{\link[=api]{api()}}
}

\subsection{Copying}{

As \code{Plumbrer} objects are using reference semantics new copies of an api cannot
be made simply be assigning it to a new variable. If a true copy of a \code{Plumber}
object is desired, use the \code{clone()} method.
}
}
\section{Super class}{
\code{\link[fiery:Fire]{fiery::Fire}} -> \code{Plumber}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{request_router}}{The router handling requests}

\item{\code{header_router}}{The router handling partial requests (the request
will pass through this router prior to reading in the body)}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Plumber-new}{\code{Plumber$new()}}
\item \href{#method-Plumber-format}{\code{Plumber$format()}}
\item \href{#method-Plumber-ignite}{\code{Plumber$ignite()}}
\item \href{#method-Plumber-add_route}{\code{Plumber$add_route()}}
\item \href{#method-Plumber-request_handler}{\code{Plumber$request_handler()}}
\item \href{#method-Plumber-message_handler}{\code{Plumber$message_handler()}}
\item \href{#method-Plumber-parse_file}{\code{Plumber$parse_file()}}
\item \href{#method-Plumber-add_api_spec}{\code{Plumber$add_api_spec()}}
\item \href{#method-Plumber-clone}{\code{Plumber$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="async"><a href='../../fiery/html/Fire.html#method-Fire-async'><code>fiery::Fire$async()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="attach"><a href='../../fiery/html/Fire.html#method-Fire-attach'><code>fiery::Fire$attach()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="close_ws_con"><a href='../../fiery/html/Fire.html#method-Fire-close_ws_con'><code>fiery::Fire$close_ws_con()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="delay"><a href='../../fiery/html/Fire.html#method-Fire-delay'><code>fiery::Fire$delay()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="exclude_static"><a href='../../fiery/html/Fire.html#method-Fire-exclude_static'><code>fiery::Fire$exclude_static()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="extinguish"><a href='../../fiery/html/Fire.html#method-Fire-extinguish'><code>fiery::Fire$extinguish()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="get_data"><a href='../../fiery/html/Fire.html#method-Fire-get_data'><code>fiery::Fire$get_data()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="has_plugin"><a href='../../fiery/html/Fire.html#method-Fire-has_plugin'><code>fiery::Fire$has_plugin()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="header"><a href='../../fiery/html/Fire.html#method-Fire-header'><code>fiery::Fire$header()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="is_running"><a href='../../fiery/html/Fire.html#method-Fire-is_running'><code>fiery::Fire$is_running()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="log"><a href='../../fiery/html/Fire.html#method-Fire-log'><code>fiery::Fire$log()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="off"><a href='../../fiery/html/Fire.html#method-Fire-off'><code>fiery::Fire$off()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="on"><a href='../../fiery/html/Fire.html#method-Fire-on'><code>fiery::Fire$on()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="reignite"><a href='../../fiery/html/Fire.html#method-Fire-reignite'><code>fiery::Fire$reignite()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="remove_async"><a href='../../fiery/html/Fire.html#method-Fire-remove_async'><code>fiery::Fire$remove_async()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="remove_data"><a href='../../fiery/html/Fire.html#method-Fire-remove_data'><code>fiery::Fire$remove_data()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="remove_delay"><a href='../../fiery/html/Fire.html#method-Fire-remove_delay'><code>fiery::Fire$remove_delay()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="remove_time"><a href='../../fiery/html/Fire.html#method-Fire-remove_time'><code>fiery::Fire$remove_time()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="resume"><a href='../../fiery/html/Fire.html#method-Fire-resume'><code>fiery::Fire$resume()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="safe_call"><a href='../../fiery/html/Fire.html#method-Fire-safe_call'><code>fiery::Fire$safe_call()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="send"><a href='../../fiery/html/Fire.html#method-Fire-send'><code>fiery::Fire$send()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="serve_static"><a href='../../fiery/html/Fire.html#method-Fire-serve_static'><code>fiery::Fire$serve_static()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="set_client_id_converter"><a href='../../fiery/html/Fire.html#method-Fire-set_client_id_converter'><code>fiery::Fire$set_client_id_converter()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="set_data"><a href='../../fiery/html/Fire.html#method-Fire-set_data'><code>fiery::Fire$set_data()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="set_logger"><a href='../../fiery/html/Fire.html#method-Fire-set_logger'><code>fiery::Fire$set_logger()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="start"><a href='../../fiery/html/Fire.html#method-Fire-start'><code>fiery::Fire$start()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="stop"><a href='../../fiery/html/Fire.html#method-Fire-stop'><code>fiery::Fire$stop()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="test_header"><a href='../../fiery/html/Fire.html#method-Fire-test_header'><code>fiery::Fire$test_header()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="test_message"><a href='../../fiery/html/Fire.html#method-Fire-test_message'><code>fiery::Fire$test_message()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="test_request"><a href='../../fiery/html/Fire.html#method-Fire-test_request'><code>fiery::Fire$test_request()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="test_websocket"><a href='../../fiery/html/Fire.html#method-Fire-test_websocket'><code>fiery::Fire$test_websocket()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="time"><a href='../../fiery/html/Fire.html#method-Fire-time'><code>fiery::Fire$time()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fiery" data-topic="Fire" data-id="trigger"><a href='../../fiery/html/Fire.html#method-Fire-trigger'><code>fiery::Fire$trigger()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plumber-new"></a>}}
\if{latex}{\out{\hypertarget{method-Plumber-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{Plumber} api
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plumber$new(
  host = get_opts("host", "127.0.0.1"),
  port = get_opts("port", 8080)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{host}}{A string overriding the default host}

\item{\code{port}}{An port number overriding the default port}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{Plumber} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plumber-format"></a>}}
\if{latex}{\out{\hypertarget{method-Plumber-format}{}}}
\subsection{Method \code{format()}}{
Human readable description of the api object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plumber$format(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A character vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plumber-ignite"></a>}}
\if{latex}{\out{\hypertarget{method-Plumber-ignite}{}}}
\subsection{Method \code{ignite()}}{
Begin running the server. Will trigger the \code{start} event
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plumber$ignite(block = FALSE, showcase = is_interactive(), ..., silent = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{block}}{Should the console be blocked while running (alternative is
to run in the background)}

\item{\code{showcase}}{Should the default browser open up at the server address.
If \code{TRUE} then a browser opens at the root of the api, unless the api
contains OpenAPI documentation in which case it will open at that
location. If a string the string is used as a path to add to the root
before opening.}

\item{\code{...}}{Arguments passed on to the \code{start} handler}

\item{\code{silent}}{Should startup messaging by silenced}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plumber-add_route"></a>}}
\if{latex}{\out{\hypertarget{method-Plumber-add_route}{}}}
\subsection{Method \code{add_route()}}{
Add a new route to either the request or header router
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plumber$add_route(name, route = NULL, header = FALSE, after = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The name of the route to add. If a route is already present
with this name then the provided route (if any) is merged into it}

\item{\code{route}}{The route to add. If \code{NULL} a new empty route will be
created}

\item{\code{header}}{Logical. Should the route be added to the header router?}

\item{\code{after}}{The location to place the new route on the stack. \code{NULL}
will place it at the end. Will not have an effect if a route with the
given name already exists.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plumber-request_handler"></a>}}
\if{latex}{\out{\hypertarget{method-Plumber-request_handler}{}}}
\subsection{Method \code{request_handler()}}{
Add a handler to a request. See \link{api_request_handlers} for
detailed information
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plumber$request_handler(
  method,
  path,
  handler,
  serializers,
  parsers = NULL,
  use_strict_serializer = FALSE,
  download = FALSE,
  route = NULL,
  header = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{method}}{The HTTP method to attach the handler to}

\item{\code{path}}{A string giving the path the handler responds to.}

\item{\code{handler}}{A handler function to call when a request is matched to
the path}

\item{\code{serializers}}{A named list of serializers that can be used to format
the response before sending it back to the client. Which one is selected
is based on the request \code{Accept} header}

\item{\code{parsers}}{A named list of parsers that can be used to parse the
request body before passing it in as the \code{body} argument. Which one is
selected is based on the request \code{Content-Type} header}

\item{\code{use_strict_serializer}}{By default, if a serializer that respects
the requests \code{Accept} header cannot be found, then the first of the
provided ones are used. Setting this to \code{TRUE} will instead send back a
\verb{406 Not Acceptable} response}

\item{\code{download}}{Should the response mark itself for download instead of
being shown inline? Setting this to \code{TRUE} will set the
\code{Content-Disposition} header in the response to \code{attachment}. Setting it
to a string is equivalent to setting it to \code{TRUE} but will in addition
also set the default filename of the download to the string value}

\item{\code{route}}{The route this handler should be added to. Defaults to the
last route in the stack. If the route does not exist it will be created
as the last route in the stack.}

\item{\code{header}}{Logical. Should the handler be added to the header router}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plumber-message_handler"></a>}}
\if{latex}{\out{\hypertarget{method-Plumber-message_handler}{}}}
\subsection{Method \code{message_handler()}}{
Add a handler to a WebSocket message. See \link{api_message} for
detailed information
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plumber$message_handler(handler)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{handler}}{A function conforming to the specifications laid out in
\code{\link[=api_message]{api_message()}}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plumber-parse_file"></a>}}
\if{latex}{\out{\hypertarget{method-Plumber-parse_file}{}}}
\subsection{Method \code{parse_file()}}{
Parses a plumber file and updates the app according to it
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plumber$parse_file(file, env = caller_env())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The path to a file to parse}

\item{\code{env}}{The environment to evaluate the content of the file in}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plumber-add_api_spec"></a>}}
\if{latex}{\out{\hypertarget{method-Plumber-add_api_spec}{}}}
\subsection{Method \code{add_api_spec()}}{
Add a (partial) OpenAPI spec to the api docs
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plumber$add_api_spec(spec, overwrite = FALSE, subset = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{spec}}{A list providing documentation}

\item{\code{overwrite}}{Logical. Should already existing documentation be
removed or should it be merged together with \code{spec}}

\item{\code{subset}}{A character vector giving the path to the subset of the
docs to assign \code{spec} to}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Plumber-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Plumber-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Plumber$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
