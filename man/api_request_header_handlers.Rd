% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_handlers.R
\name{api_request_header_handlers}
\alias{api_request_header_handlers}
\alias{api_get_header}
\alias{api_head_header}
\alias{api_post_header}
\alias{api_put_header}
\alias{api_delete_header}
\alias{api_connect_header}
\alias{api_options_header}
\alias{api_trace_header}
\alias{api_patch_header}
\alias{api_any_header}
\title{Add a handler for a request header}
\usage{
api_get_header(
  api,
  path,
  handler,
  serializers = NULL,
  parsers = NULL,
  use_strict_serializer = FALSE,
  download = FALSE,
  route = NULL
)

api_head_header(
  api,
  path,
  handler,
  serializers = NULL,
  parsers = NULL,
  use_strict_serializer = FALSE,
  download = FALSE,
  route = NULL
)

api_post_header(
  api,
  path,
  handler,
  serializers = NULL,
  parsers = NULL,
  use_strict_serializer = FALSE,
  download = FALSE,
  route = NULL
)

api_put_header(
  api,
  path,
  handler,
  serializers = NULL,
  parsers = NULL,
  use_strict_serializer = FALSE,
  download = FALSE,
  route = NULL
)

api_delete_header(
  api,
  path,
  handler,
  serializers = NULL,
  parsers = NULL,
  use_strict_serializer = FALSE,
  download = FALSE,
  route = NULL
)

api_connect_header(
  api,
  path,
  handler,
  serializers = NULL,
  parsers = NULL,
  use_strict_serializer = FALSE,
  download = FALSE,
  route = NULL
)

api_options_header(
  api,
  path,
  handler,
  serializers = NULL,
  parsers = NULL,
  use_strict_serializer = FALSE,
  download = FALSE,
  route = NULL
)

api_trace_header(
  api,
  path,
  handler,
  serializers = NULL,
  parsers = NULL,
  use_strict_serializer = FALSE,
  download = FALSE,
  route = NULL
)

api_patch_header(
  api,
  path,
  handler,
  serializers = NULL,
  parsers = NULL,
  use_strict_serializer = FALSE,
  download = FALSE,
  route = NULL
)

api_any_header(
  api,
  path,
  handler,
  serializers = NULL,
  parsers = NULL,
  use_strict_serializer = FALSE,
  download = FALSE,
  route = NULL
)
}
\arguments{
\item{api}{A plumber2 api object to add the handler to}

\item{path}{A string giving the path the handler responds to. See Details}

\item{handler}{A handler function to call when a request is matched to the
path}

\item{serializers}{A named list of serializers that can be used to format the
response before sending it back to the client. Which one is selected is based
on the request \code{Accept} header}

\item{parsers}{A named list of parsers that can be used to parse the
request body before passing it in as the \code{body} argument. Which one is
selected is based on the request \code{Content-Type} header}

\item{use_strict_serializer}{By default, if a serializer can not be found
that respects the requests \code{Accept} header, then the first of the provided
ones are used. Setting this to \code{TRUE} will instead send back a
\verb{406 Not Acceptable} response}

\item{download}{Should the response mark itself for download instead of being
shown inline? Setting this to \code{TRUE} will set the \code{Content-Disposition}
header in the response to \code{attachment}. Setting it to a string is equivalent
to setting it to \code{TRUE} but will in addition also set the default filename of
the download to the string value}

\item{route}{The route this handler should be added to. Defaults to the last
route in the stack.}
}
\value{
These functions return the \code{api} object allowing for easy chaining
with the pipe
}
\description{
These handlers are called before the request body has been recieved and lets y
ou preemptively reject requests before recieving their full content. Most of
your logic, however, will be in the main handlers and you are asked to
consult the \link{api_request_handlers} docs for in-depth details on how to use
request handlers in general.
}
\seealso{
Other Request Handlers: 
\code{\link{api_request_handlers}}
}
\concept{Request Handlers}
