% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/serializers.R
\name{serializers}
\alias{serializers}
\alias{format_csv}
\alias{format_tsv}
\alias{format_rds}
\alias{format_geojson}
\alias{format_feather}
\alias{format_parquet}
\alias{format_yaml}
\alias{format_htmlwidget}
\alias{format_format}
\alias{format_print}
\alias{format_cat}
\alias{format_unboxed}
\title{Serializer functions provided by plumber2}
\usage{
format_csv(...)

format_tsv(...)

format_rds(version = "3", ascii = FALSE, ...)

format_geojson(...)

format_feather(...)

format_parquet(...)

format_yaml(...)

format_htmlwidget(...)

format_format(..., sep = "\\n")

format_print(..., sep = "\\n")

format_cat(..., sep = "\\n")

format_unboxed(...)
}
\arguments{
\item{...}{Further argument passed on to the internal formatting function.
See Details for information on which function handles the formatting
internally in each serializer}

\item{version}{the workspace format version to use.  \code{NULL}
    specifies the current default version (3). The only other supported
    value is 2, the default from \R 1.4.0 to \R 3.5.0.}

\item{ascii}{a logical.  If \code{TRUE} or \code{NA}, an ASCII
    representation is written; otherwise (default) a binary one.
    See also the comments in the help for \code{\link[base]{save}}.}

\item{sep}{The separator between multiple elements}
}
\value{
A function accepting the response body
}
\description{
These functions cover a large area of potential response body formats. They
are all registered to their standard mime type but users may want to use
them to register them to alternative types if they know it makes sense.
}
\section{Provided serializers}{
\itemize{
\item \code{format_csv()} uses \code{\link[readr:format_delim]{readr::format_csv()}} for formatting. It is registered
as \code{"csv"} to the mime type \code{text/csv}
\item \code{format_tsv()} uses \code{\link[readr:format_delim]{readr::format_tsv()}} for formatting. It is registered
as \code{"tsv"} to the mime type \code{text/tsv}
\item \code{format_rds()} uses \code{\link[=serialize]{serialize()}} for formatting. It is registered as
\code{"rds"} to the mime type \code{application/rds}
\item \code{format_geojson}uses \code{\link[geojsonsf:sfc_geojson]{geojsonsf::sfc_geojson()}} or \code{\link[geojsonsf:sf_geojson]{geojsonsf::sf_geojson()}}
for formatting depending on the class of the response body. It is
registered as \code{"geojson"} to the mime type \code{application/geo+json}
\item \code{format_feather}uses \code{\link[arrow:write_feather]{arrow::write_feather()}} for formatting. It is
registered as \code{"feather"} to the mime type
\code{application/vnd.apache.arrow.file}
\item \code{format_parquet}uses \code{\link[nanoparquet:write_parquet]{nanoparquet::write_parquet()}} for formatting. It is
registered as \code{"parquet"} to the mime type \code{application/vnd.apache.parquet}
\item \code{format_yaml}uses \code{\link[yaml:as.yaml]{yaml::as.yaml()}} for formatting. It is registered
as \code{"yaml"} to the mime type \code{text/yaml}
\item \code{format_htmlwidget}uses \code{\link[htmlwidgets:saveWidget]{htmlwidgets::saveWidget()}} for formatting. It is
registered as \code{"htmlwidget"} to the mime type \code{text/html}
\item \code{format_format}uses \code{\link[=format]{format()}} for formatting. It is registered
as \code{"format"} to the mime type \code{text/plain}
\item \code{format_print}uses \code{\link[=print]{print()}} for formatting. It is registered
as \code{"print"} to the mime type \code{text/plain}
\item \code{format_cat}uses \code{\link[=cat]{cat()}} for formatting. It is registered
as \code{"cat"} to the mime type \code{text/plain}
\item \code{format_unboxed}uses \code{\link[reqres:formatters]{reqres::format_json()}} with \code{auto_unbox = TRUE} for
formatting. It is registered as \code{"unboxedJSON"} to the mime type
\code{application/json}
}
\subsection{Additional registered serializers}{
\itemize{
\item \code{\link[reqres:formatters]{reqres::format_json()}} is registered as "\code{json}" to the mime type
\code{application/json}
\item \code{\link[reqres:formatters]{reqres::format_html()}} is registered as "\code{html}" to the mime
type \code{text/html}
\item \code{\link[reqres:formatters]{reqres::format_xml()}} is registered as "\code{xml}" to the mime type
\code{text/xml}
\item \code{\link[reqres:formatters]{reqres::format_plain()}} is registered as "\code{text}" to the mime type
\code{text/plain}
}
}
}

\seealso{
\code{\link[=register_serializer]{register_serializer()}}
}
